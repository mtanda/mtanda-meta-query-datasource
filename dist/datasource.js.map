{"version":3,"sources":["../src/datasource.js"],"names":["_","MetaQueryDatasource","instanceSettings","$q","datasourceSrv","options","sets","groupBy","targets","promises","map","dsName","datasource","when","data","get","then","opt","angular","copy","t","hide","ds","query","each","results","result","idx","refId","all","flatten","indexedData","keyBy","referencedRefId","target","expr","expression","split","opRefId","replace","datapoints","d","parseFloat","r","push","filter"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class MetaQueryDatasource {\n  constructor(instanceSettings, $q, datasourceSrv) {\n    this.instanceSettings = instanceSettings;\n    this.$q = $q;\n    this.datasourceSrv = datasourceSrv;\n  }\n\n  query(options) {\n    var sets = _.groupBy(options.targets, 'datasource');\n    var promises = _.map(sets, targets => {\n      var dsName = targets[0].datasource;\n      if (dsName === 'Meta Query') {\n        return this.$q.when({ data: [] });\n      }\n\n      return this.datasourceSrv.get(dsName).then(ds => {\n        var opt = angular.copy(options);\n        opt.targets = targets.map(t => {\n          // temporal fix\n          t.hide = false;\n          return t;\n        });\n        return ds.query(opt).then(results => {\n          _.each(results.data, (result, idx) => {\n            result.refId = opt.targets[idx].refId;\n          });\n          return results;\n        });\n      });\n    });\n\n    return this.$q.all(promises).then(results => {\n      let data = _.flatten(_.map(results, 'data'));\n      let indexedData = _.keyBy(data, 'refId');\n      let referencedRefId = {};\n      _.each(options.targets, target => {\n        let dsName = target.datasource;\n        if (dsName === 'Meta Query') {\n          let expr = target.expression.split(/ /);\n          let opRefId = expr[0].replace(/#/, '');\n          referencedRefId[opRefId] = true;\n          let datapoints = _.map(indexedData[opRefId].datapoints, d => {\n            if (!d[0]) {\n              return [d[0], d[1]];\n            }\n            expr[2] = parseFloat(expr[2]);\n            var r = d[0]\n            switch (expr[1]) {\n              case '+':\n                r += expr[2];\n                break;\n              case '-':\n                r -= expr[2];\n                break;\n              case '*':\n                r *= expr[2];\n                break;\n              case '/':\n                r /= expr[2];\n                break;\n            }\n            return [r, d[1]];\n          });\n          data.push({\n            refId: target.refId,\n            target: target.expression,\n            datapoints: datapoints\n          })\n        }\n      });\n      data = _.filter(data, d => {\n        return !referencedRefId[d.refId];\n      });\n      return { data: data };\n    });\n  }\n}\n"]}